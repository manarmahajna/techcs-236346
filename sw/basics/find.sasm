; === Initialize at = 0 ===
PUSHI 0            ; at = 0

; === Begin loop ===
loop:
DUP                ; duplicate 'at' for comparison
PUSHI 2
LOAD               ; load 'n'
LT                 ; check if at < n
JZ end             ; if not, jump to end

; === Compare a[at] == v ===
DUP                ; duplicate 'at' again for a[at]
PUSHI 3
LOAD               ; load 'a' (base address)
ADD                ; a + at
LOAD               ; a[at]
PUSHI 1
LOAD               ; load 'v'
EQ                 ; check if a[at] == v
JZ not_found       ; if not equal, go to not_found

; === Found match: store at and halt ===
PUSHI 0
STORE              ; store at to memory[0]
HALT

; === Not found, continue ===
not_found:
PUSHI 1
ADD                ; at++
JMP loop

; === End of loop, value not found ===
end:
PUSHI 0
STORE              ; store n (at this point) to memory[0]
HALT
